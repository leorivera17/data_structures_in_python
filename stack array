# Leo Rivera
# Lab 2
class Stack:
    def __init__(self, capacity):
        """Creates an empty stack with a capacity"""
        self.capacity = capacity
        self.items = [None] * capacity
        self.num_items = 0

    def is_empty(self):
        """Returns true if the stack self is empty and false otherwise"""
        return self.num_items == 0

    def is_full(self):
        """Returns true if the stack self is full and false otherwise"""
        return self.num_items == self.capacity

    def push(self, item):
        """If stack is not full, pushes item on stack.
        #            If stack is full when push is attempted, raises IndexError
        #            MUST have O(1) performance"""
        if self.num_items == self.capacity:
            raise IndexError
        self.items[self.num_items] = item
        self.num_items += 1
        return self.items

    def pop(self):
        """If stack is not empty, pops item from stack and returns item.
        #            If stack is empty when pop is attempted, raises IndexError
        #            MUST have O(1) performance"""
        if self.num_items == 0:
            raise IndexError
        self.num_items -= 1
        return self.items[self.num_items]

    def peek(self):
        """If stack is not empty, returns next item to be popped (but does not pop the item)
#            If stack is empty, raises IndexError
#            MUST have O(1) performance"""
        if self.num_items == 0:
            raise IndexError
        return self.items[self.num_items - 1]

    def size(self):
        """Returns the number of elements currently in the stack, not the capacity
#            MUST have O(1) performance"""
        return self.num_items

